#include "script.h"
#include "natives.h"
#include "types.h"
#include "nativeCaller.h"
#include "enums.h"
#include "main.h"

const char* blockedConsumableNames[] = {
"CONSUMABLE_AGED_PIRATE_RUM",
"CONSUMABLE_APPLE",
"CONSUMABLE_APRICOTS_CAN",
"CONSUMABLE_BAKED_BEANS_CAN",
"CONSUMABLE_BEETS",
"CONSUMABLE_BIG_GAME_MEAT_OREGANO_COOKED",
"CONSUMABLE_BIG_GAME_MEAT_THYME_COOKED",
"CONSUMABLE_BIG_GAME_MEAT_WILD_MINT_COOKED",
"CONSUMABLE_BISCUIT_BOX",
"CONSUMABLE_BRANDY",
"CONSUMABLE_BRANDY_USED",
"CONSUMABLE_BREAD_CHUNK",
"CONSUMABLE_BREAD_ROLL",
"CONSUMABLE_CANDY_BAG",
"CONSUMABLE_CARROT",
"CONSUMABLE_CELERY",
"CONSUMABLE_CHEESE_WEDGE",
"CONSUMABLE_CHEWING_TOBACCO",
"CONSUMABLE_CHEWING_TOBACCO_USED",
"CONSUMABLE_CHOCOLATE_BAR",
"CONSUMABLE_CIGAR",
"CONSUMABLE_CIGARETTE_BOX",
"CONSUMABLE_CIGARETTE_BOX_CHEAP",
"CONSUMABLE_COCAINE_CHEWING_GUM",
"CONSUMABLE_COCAINE_CHEWING_GUM_USED",
"CONSUMABLE_COFFEE",
"CONSUMABLE_COFFEE_GNDS_REG",
"CONSUMABLE_CORN",
"CONSUMABLE_CORNEDBEEF_CAN",
"CONSUMABLE_CRACKERS",
"CONSUMABLE_CRAFTED_SUPER_MEAL",
"CONSUMABLE_CRUSTACEAN_MEAT_MINT_COOKED",
"CONSUMABLE_CRUSTACEAN_MEAT_OREGANO_COOKED",
"CONSUMABLE_CRUSTACEAN_MEAT_THYME_COOKED",
"CONSUMABLE_EXOTIC_BIRD_OREGANO_COOKED",
"CONSUMABLE_EXOTIC_BIRD_THYME_COOKED",
"CONSUMABLE_EXOTIC_BIRD_WILD_MINT_COOKED",
"CONSUMABLE_FLAKEY_FISH_OREGANO_COOKED",
"CONSUMABLE_FLAKEY_FISH_THYME_COOKED",
"CONSUMABLE_FLAKEY_FISH_WILD_MINT_COOKED",
"CONSUMABLE_GAME_MEAT_OREGANO_COOKED",
"CONSUMABLE_GAME_MEAT_THYME_COOKED",
"CONSUMABLE_GAME_MEAT_WILD_MINT_COOKED",
"CONSUMABLE_GIN",
"CONSUMABLE_GINSENG_ELIXIER",
"CONSUMABLE_GIN_USED",
"CONSUMABLE_GRISTLY_MUTTON_OREGANO_COOKED",
"CONSUMABLE_GRISTLY_MUTTON_THYME_COOKED",
"CONSUMABLE_GRISTLY_MUTTON_WILD_MINT_COOKED",
"CONSUMABLE_HAIR_GREASE",
"CONSUMABLE_HAIR_TONIC",
"CONSUMABLE_HAYCUBE",
"CONSUMABLE_HERBIVORE_BAIT",
"CONSUMABLE_HERB_ALASKAN_GINSENG",
"CONSUMABLE_HERB_AMERICAN_GINSENG",
"CONSUMABLE_HERB_BAY_BOLETE",
"CONSUMABLE_HERB_BLACK_BERRY",
"CONSUMABLE_HERB_BLACK_CURRANT",
"CONSUMABLE_HERB_BURDOCK_ROOT",
"CONSUMABLE_HERB_CHANTERELLES",
"CONSUMABLE_HERB_COMMON_BULRUSH",
"CONSUMABLE_HERB_CREEPING_THYME",
"CONSUMABLE_HERB_CURRANT",
"CONSUMABLE_HERB_DESERT_SAGE",
"CONSUMABLE_HERB_ENGLISH_MACE",
"CONSUMABLE_HERB_EVERGREEN_HUCKLEBERRY",
"CONSUMABLE_HERB_GINSENG",
"CONSUMABLE_HERB_GOLDEN_CURRANT",
"CONSUMABLE_HERB_HUMMINGBIRD_SAGE",
"CONSUMABLE_HERB_INDIAN_TOBACCO",
"CONSUMABLE_HERB_MILKWEED",
"CONSUMABLE_HERB_OLEANDER_SAGE",
"CONSUMABLE_HERB_OREGANO",
"CONSUMABLE_HERB_PARASOL_MUSHROOM",
"CONSUMABLE_HERB_PRAIRIE_POPPY",
"CONSUMABLE_HERB_RAMS_HEAD",
"CONSUMABLE_HERB_RED_RASPBERRY",
"CONSUMABLE_HERB_RED_SAGE",
"CONSUMABLE_HERB_SAGE",
"CONSUMABLE_HERB_SALTBUSH",
"CONSUMABLE_HERB_VANILLA_FLOWER",
"CONSUMABLE_HERB_VIOLET_SNOWDROP",
"CONSUMABLE_HERB_WILD_CARROTS",
"CONSUMABLE_HERB_WILD_FEVERFEW",
"CONSUMABLE_HERB_WILD_MINT",
"CONSUMABLE_HERB_WINTERGREEN_BERRY",
"CONSUMABLE_HERB_YARROW",
"CONSUMABLE_HORSE_MEDICINE",
"CONSUMABLE_HORSE_MEDICINE_USED",
"CONSUMABLE_HORSE_OINTMENT",
"CONSUMABLE_HORSE_STIMULANT_USED",
"CONSUMABLE_JERKY",
"CONSUMABLE_JERKY_VENISON",
"CONSUMABLE_KIDNEYBEANS_CAN",
"CONSUMABLE_MATURE_VENISON_OREGANO_COOKED",
"CONSUMABLE_MATURE_VENISON_THYME_COOKED",
"CONSUMABLE_MATURE_VENISON_WILD_MINT_COOKED",
"CONSUMABLE_MEAT_BIG_GAME_COOKED",
"CONSUMABLE_MEAT_CRUSTACEAN_COOKED",
"CONSUMABLE_MEAT_EXOTIC_BIRD_COOKED",
"CONSUMABLE_MEAT_FLAKEY_FISH_COOKED",
"CONSUMABLE_MEAT_GAMEY_BIRD_COOKED",
"CONSUMABLE_MEAT_GAME_COOKED",
"CONSUMABLE_MEAT_GRISTLY_MUTTON_COOKED",
"CONSUMABLE_MEAT_GRITTY_FISH_COOKED",
"CONSUMABLE_MEAT_HERPTILE_COOKED",
"CONSUMABLE_MEAT_MATURE_VENISON_COOKED",
"CONSUMABLE_MEAT_PLUMP_BIRD_COOKED",
"CONSUMABLE_MEAT_PRIME_BEEF_COOKED",
"CONSUMABLE_MEAT_STRINGY_COOKED",
"CONSUMABLE_MEAT_SUCCULENT_FISH_COOKED",
"CONSUMABLE_MEAT_TENDER_PORK_COOKED",
"CONSUMABLE_MOONSHINE",
"CONSUMABLE_OAT_CAKES",
"CONSUMABLE_OFFAL",
"CONSUMABLE_PEACH",
"CONSUMABLE_PEACHES_CAN",
"CONSUMABLE_PEAR",
"CONSUMABLE_PEAS_CAN",
"CONSUMABLE_PEPPERMINT",
"CONSUMABLE_PINEAPPLES_CAN",
"CONSUMABLE_PLUMP_BIRD_OREGANO_COOKED",
"CONSUMABLE_PLUMP_BIRD_THYME_COOKED",
"CONSUMABLE_PLUMP_BIRD_WILD_MINT_COOKED",
"CONSUMABLE_PORK_COOKED",
"CONSUMABLE_POTENT_HERBIVORE_BAIT",
"CONSUMABLE_POTENT_PREDATOR_BAIT",
"CONSUMABLE_PREDATOR_BAIT",
"CONSUMABLE_PRIME_BEEF_OREGANO_COOKED",
"CONSUMABLE_PRIME_BEEF_THYME_COOKED",
"CONSUMABLE_PRIME_BEEF_WILD_MINT_COOKED",
"CONSUMABLE_RUM",
"CONSUMABLE_RUM_USED",
"CONSUMABLE_SALMON_CAN",
"CONSUMABLE_SCENT_BLOCKER",
"CONSUMABLE_SCENT_BLOCKER_USED",
"CONSUMABLE_SEASONING",
"CONSUMABLE_STRAWBERRIES_CAN",
"CONSUMABLE_SUCCULENT_FISH_OREGANO_COOKED",
"CONSUMABLE_SUCCULENT_FISH_THYME_COOKED",
"CONSUMABLE_SUCCULENT_FISH_WILD_MINT_COOKED",
"CONSUMABLE_SUGARCUBE",
"CONSUMABLE_SWEET_CORN_CAN",
"CONSUMABLE_TENDER_PORK_OREGANO_COOKED",
"CONSUMABLE_TENDER_PORK_THYME_COOKED",
"CONSUMABLE_TENDER_PORK_WILD_MINT_COOKED",
"CONSUMABLE_VALERIAN_ROOT",
"CONSUMABLE_WHISKEY",
"CONSUMABLE_WHISKEY_USED",
"CONSUMABLE_POISON_TONIC",
"CONSUMABLE_POTENT_TONIC",
"CONSUMABLE_SPECIAL_TONIC",
"CONSUMABLE_TONIC",
"CONSUMABLE_TONIC_USED",
"CONSUMABLE_MEDICINE",
"CONSUMABLE_MEDICINE_USED",
"CONSUMABLE_POTENT_MEDICINE",
"CONSUMABLE_POTENT_RESTORATIVE",
"CONSUMABLE_POTENT_SNAKE_OIL",
"CONSUMABLE_RESTORATIVE",
"CONSUMABLE_RESTORATIVE_USED",
"CONSUMABLE_SNAKE_OIL",
"CONSUMABLE_SNAKE_OIL_USED",
"CONSUMABLE_SPECIAL_MEDICINE",
"CONSUMABLE_SPECIAL_RESTORATIVE",
"CONSUMABLE_SPECIAL_SNAKE_OIL",
"CONSUMABLE_STRING_MEAT_COOKED",
"PROVISION_STRINGY_MEAT",
"CONSUMABLE_ANTIDOTE",
"CONSUMABLE_BEARD_TONIC",
"CONSUMABLE_BEAR_BAIT",
"CONSUMABLE_BIG_GAME_MEAT_COOKED",
"CONSUMABLE_CIGARETTE_BOX_CHEAP_USED",
"CONSUMABLE_CIGARETTE_BOX_USED",
"CONSUMABLE_COVER_SCENT",
"CONSUMABLE_COVER_SCENT_USED",
"CONSUMABLE_CRUSTACEAN_MEAT_COOKED",
"CONSUMABLE_EXOTIC_BIRD_COOKED",
"CONSUMABLE_FLAKEY_FISH_COOKED",
"CONSUMABLE_GAMEY_BIRD_COOKED",
"CONSUMABLE_GAME_MEAT_COOKED",
"CONSUMABLE_GRISTLY_MUTTON_COOKED",
"CONSUMABLE_GRITTY_FISH_MEAT_COOKED",
"CONSUMABLE_HERB_BLOOD_FLOWER",
"CONSUMABLE_HERB_CARDINAL_FLOWER",
"CONSUMABLE_HERB_CROWS_GARLIC",
"CONSUMABLE_HERB_WILD_CARROT",
"CONSUMABLE_HERB_WILD_RHUBARB",
"CONSUMABLE_HERPTILE_MEAT_COOKED",
"CONSUMABLE_HORSE_CARE_PACKAGE",
"CONSUMABLE_HORSE_OINTMENT_CRAFTED",
"CONSUMABLE_HORSE_REVIVER",
"CONSUMABLE_HORSE_STIMULANT",
"CONSUMABLE_LOCK_BREAKER",
"CONSUMABLE_MATURE_VENISON_COOKED",
"CONSUMABLE_MEAL_BEEF_STEW",
"CONSUMABLE_MEAL_BEEF_STEW_PEARSON_BASE",
"CONSUMABLE_MEAL_BEEF_STEW_PEARSON_BASE_EGGS",
"CONSUMABLE_MEAL_BEEF_STEW_PEARSON_HIGH",
"CONSUMABLE_MEAL_BEEF_STEW_PEARSON_HIGH_EGGS",
"CONSUMABLE_MEAL_BEEF_STEW_PEARSON_LOW",
"CONSUMABLE_MEAL_BEEF_STEW_PEARSON_LOW_EGGS",
"CONSUMABLE_MEAL_BEEF_STEW_PEARSON_MED",
"CONSUMABLE_MEAL_BEEF_STEW_PEARSON_MED_EGGS",
"CONSUMABLE_MEAL_BEEF_STEW_PEARSON_REGIONAL",
"CONSUMABLE_MEAL_BEEF_STEW_PEARSON_REGIONAL_EGGS",
"CONSUMABLE_MEAL_CHILLI",
"CONSUMABLE_MEAL_CONSOMME",
"CONSUMABLE_MEAL_CORNBREAD",
"CONSUMABLE_MEAL_CORNED_BEEF_HASH",
"CONSUMABLE_MEAL_CRAB_CAKES",
"CONSUMABLE_MEAL_FISH_STEW",
"CONSUMABLE_MEAL_FRIED_CATFISH",
"CONSUMABLE_MEAL_HAM_SANDWICH",
"CONSUMABLE_MEAL_LAMB_FRY",
"CONSUMABLE_MEAL_LAMB_HEART",
"CONSUMABLE_MEAL_LIVER_SANDWICH",
"CONSUMABLE_MEAL_LOBSTER_BISQUE",
"CONSUMABLE_MEAL_OATMEAL",
"CONSUMABLE_MEAL_OYSTER_STEW",
"CONSUMABLE_MEAL_PEACH_COBBLER",
"CONSUMABLE_MEAL_PORK_BISCUIT_SANDWICH",
"CONSUMABLE_MEAL_POTATOES_PEAS",
"CONSUMABLE_MEAL_PRAIRIE_CHICKEN",
"CONSUMABLE_MEAL_PRIME_RIB",
"CONSUMABLE_MEAL_ROAST_BEEF",
"CONSUMABLE_MEAL_TURTLE_SOUP",
"CONSUMABLE_MEAL_WHEAT_MILK",
"CONSUMABLE_PLUMP_BIRD_COOKED",
"CONSUMABLE_POTENT_ANTIDOTE",
"CONSUMABLE_POTENT_HORSE_MEDICINE",
"CONSUMABLE_POTENT_HORSE_STIMULANT",
"CONSUMABLE_PRIME_BEEF_COOKED",
"CONSUMABLE_SALOON_BEER",
"CONSUMABLE_SPECIAL_HORSE_MEDICINE",
"CONSUMABLE_SPECIAL_HORSE_REVIVER_CRAFTED",
"CONSUMABLE_SPECIAL_HORSE_STIMULANT_CRAFTED",
"CONSUMABLE_SPECIAL_MEDICINE_CRAFTED",
"CONSUMABLE_SPECIAL_RESTORATIVE_CRAFTED",
"CONSUMABLE_SPECIAL_SNAKE_OIL_CRAFTED",
"CONSUMABLE_SPECIAL_TONIC_CRAFTED",
"CONSUMABLE_SUCCULENT_FISH_COOKED",
"CONSUMABLE_TENDER_PORK_COOKED"
};

const char* unlockedConsumablesNames[] = {
"CONSUMABLE_POISON_TONIC",
"CONSUMABLE_POTENT_TONIC",
"CONSUMABLE_SPECIAL_TONIC",
"CONSUMABLE_TONIC",
"CONSUMABLE_TONIC_USED",
"CONSUMABLE_MEDICINE",
"CONSUMABLE_MEDICINE_USED",
"CONSUMABLE_POTENT_MEDICINE",
"CONSUMABLE_POTENT_RESTORATIVE",
"CONSUMABLE_POTENT_SNAKE_OIL",
"CONSUMABLE_RESTORATIVE",
"CONSUMABLE_RESTORATIVE_USED",
"CONSUMABLE_SNAKE_OIL",
"CONSUMABLE_SNAKE_OIL_USED",
"CONSUMABLE_SPECIAL_MEDICINE",
"CONSUMABLE_SPECIAL_RESTORATIVE_CRAFTED",
"CONSUMABLE_SPECIAL_RESTORATIVE",
"CONSUMABLE_SPECIAL_SNAKE_OIL",
"CONSUMABLE_SPECIAL_SNAKE_OIL_CRAFTED",
"CONSUMABLE_SPECIAL_TONIC_CRAFTED",
"CONSUMABLE_SPECIAL_MEDICINE_CRAFTED"
};

const int numBlockedConsumables = sizeof(blockedConsumableNames) / sizeof(const char*);

Hash blockedConsumables[numBlockedConsumables];

bool IsBlockedConsumable(Hash itemHash) {
    for (int i = 0; i < numBlockedConsumables; ++i) {
        if (itemHash == blockedConsumables[i]) {
            return true;
        }
    }
    return false;
}

const int numUnlockedConsumables = sizeof(unlockedConsumablesNames) / sizeof(const char*);

Hash unblockedConsumables[numUnlockedConsumables];

bool IsUnlockedConsumable(Hash itemHash) {
    for (int i = 0; i < numUnlockedConsumables; ++i) {
        if (itemHash == unblockedConsumables[i]) {
            return true;
        }
    }
    return false;
}

bool IsPlayerInCover(Ped playerPed) {
    bool isInCover = false;
    return isInCover = PED::IS_PED_IN_COVER(playerPed, true, false);
}

void InitializeBlockedConsumables() {
    for (int i = 0; i < numBlockedConsumables; ++i) {
        blockedConsumables[i] = GAMEPLAY::GET_HASH_KEY(const_cast<char*>(blockedConsumableNames[i]));
    }
}

void InitializeUnlockedConsumables() {
    for (int i = 0; i < numUnlockedConsumables; ++i) {
        unblockedConsumables[i] = GAMEPLAY::GET_HASH_KEY(const_cast<char*>(unlockedConsumablesNames[i]));
    }
}

void update() {
    Player player = PLAYER::PLAYER_ID();
    Ped playerPed = PLAYER::PLAYER_PED_ID();
    int playerInventoryID = ITEMS::_0x13D234A2A3F66E63(playerPed);
    const char* reasonDebugChar = "REASON_DEBUG";
    Hash reasonDebug = GAMEPLAY::GET_HASH_KEY(const_cast<char*>(reasonDebugChar));

    bool inCombat = PED::IS_PED_IN_COMBAT(playerPed, 0);

    if (inCombat && !IsPlayerInCover(playerPed)) {
        //lock all consumables
        for (int i = 0; i < numBlockedConsumables; ++i) {
            ITEMS::_0x766315A564594401(playerInventoryID, blockedConsumables[i], reasonDebug);
        }
        //lock stringy meat
        ITEMS::_0x766315A564594401(playerInventoryID, 0xE42857C5, reasonDebug);

    }
    else if (inCombat && IsPlayerInCover(playerPed)) {
        //player is in cover

        //lock all consumables
        for (int i = 0; i < numBlockedConsumables; ++i) {
            ITEMS::_0x766315A564594401(playerInventoryID, blockedConsumables[i], reasonDebug);
        }
        //lock stringy meat
        //ITEMS::_0x766315A564594401(playerInventoryID, 0xE42857C5, reasonDebug);

        //unlock medicine and tonics consumables 
        for (int i = 0; i < numUnlockedConsumables; ++i) {
            ITEMS::_0x6A564540FAC12211(playerInventoryID, unblockedConsumables[i]);
        }

    }
    else {
        //out of combat 
        //unlock all blocked list
        for (int i = 0; i < numBlockedConsumables; ++i) {  
                ITEMS::_0x6A564540FAC12211(playerInventoryID, blockedConsumables[i]);
        }
    }

    WAIT(0);
}

void main() {
    InitializeBlockedConsumables();
    InitializeUnlockedConsumables();

    while (true) {
        update();
        WAIT(0);
    }
}

void ScriptMain() {
    srand(GetTickCount());
    main();
}
